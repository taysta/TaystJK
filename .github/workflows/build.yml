name: build

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/*"
  pull_request:
    branches: [master]
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - "docs/*"
  release:
    types: [published]

jobs:
  msvc:
    name: Windows ${{ matrix.arch }} ${{ matrix.build_type }} (${{ matrix.portable }})
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [x86, x86_64]
        build_type: [Debug, Release]
        portable: [Portable, Non-Portable]
        exclude:
          - build_type: Debug
            portable: Portable
        include:
          - arch: x86
            platform: Win32
          - arch: x86_64
            platform: x64

    steps:
      - uses: actions/checkout@v3

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Create Build Environment
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=bin"
          if [ "${{ matrix.portable }}" == "Portable" ]; then
            OPTIONS+=" -DBuildPortableVersion=ON"
          else
            OPTIONS+=" -DBuildPortableVersion=OFF"
          fi
          cmake $GITHUB_WORKSPACE -A ${{ matrix.platform }} $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . --config ${{ matrix.build_type }} -j $NUMBER_OF_PROCESSORS

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install . --config ${{ matrix.build_type }}

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: JAEnhanced-windows-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}
          path: ${{ github.workspace }}/build/bin/JediAcademy
          if-no-files-found: error

  ubuntu:
    name: Ubuntu ${{ matrix.arch }} ${{ matrix.build_type }} (${{ matrix.portable }})
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86, x86_64]
        build_type: [Debug, Release]
        portable: [Non-Portable]

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          if [ ${{ matrix.arch }} == "x86" ]; then
            sudo dpkg --add-architecture i386
            sudo apt-get -qq update
            sudo apt-get -y install aptitude
            sudo apt-get -y install gcc-multilib g++-multilib ninja-build
            sudo apt-get -y install --allow-downgrades libpcre2-8-0:i386 libjpeg-dev:i386 libpng-dev:i386 libcurl4-openssl-dev:i386
            sudo aptitude -y install libglib2.0-dev:i386 libsdl2-dev:i386
          else
            sudo apt-get -qq update
            sudo apt-get install libjpeg-dev libpng-dev zlib1g-dev libsdl2-dev
          fi
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install"
          if [ "${{ matrix.portable }}" == "Portable" ]; then
            OPTIONS+=" -DUseInternalLibs=ON -DBuildPortableVersion=ON"
          else
            OPTIONS+=" -DUseInternalLibs=OFF -DBuildPortableVersion=OFF"
          fi
          if [ ${{ matrix.arch }} == "x86" ]; then
            OPTIONS+=" -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchains/linux-i686.cmake"
          fi
          OPTIONS+=" -DUseInternalJPEG=ON"
          cmake $GITHUB_WORKSPACE $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . -j $(nproc)

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install .

      - name: Create JAEnhanced binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediAcademy
        shell: bash
        run: tar -czvf JAEnhanced-linux-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}.tar.gz *

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: JAEnhanced-linux-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}
          path: ${{github.workspace}}/install/JediAcademy/JAEnhanced-linux-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}.tar.gz
          if-no-files-found: error

  macos:
    name: macOS ${{ matrix.arch }} ${{ matrix.build_type }} (${{ matrix.portable}})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-13, macos-14]
        build_type: [Debug, Release]
        portable: [Non-Portable]
        include:
          - runner: macos-13
            arch: x86_64
          - runner: macos-14
            arch: arm64

    steps:
      - uses: actions/checkout@v3

      - name: Create Build Environment
        run: |
          brew install zlib libjpeg libpng sdl2
          cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          OPTIONS="-DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/install"
          if [ "${{ matrix.portable }}" == "Portable" ]; then
            OPTIONS+=" -DUseInternalLibs=ON -DBuildPortableVersion=ON"
          else
            OPTIONS+=" -DUseInternalLibs=OFF -DBuildPortableVersion=OFF"
          fi
          cmake $GITHUB_WORKSPACE $OPTIONS

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --build . -j $(getconf _NPROCESSORS_ONLN)

      - name: Install
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/build
        shell: bash
        run: cmake --install .

      - name: Create JAEnhanced binary archive
        if: ${{ matrix.build_type == 'Release' }}
        working-directory: ${{ github.workspace }}/install/JediAcademy
        shell: bash
        run: |
          chmod +x ja_enhanced.${{ matrix.arch }}.app/Contents/MacOS/ja_enhanced.${{ matrix.arch }}
          tar -czvf JAEnhanced-macos-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}.tar.gz *

      - uses: actions/upload-artifact@v4
        if: ${{ matrix.build_type == 'Release' }}
        with:
          name: JAEnhanced-macos-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}
          path: ${{ github.workspace }}/install/JediAcademy/JAEnhanced-macos-${{ matrix.arch }}-${{ matrix.build_type }}-${{ matrix.portable }}.tar.gz
          if-no-files-found: error
